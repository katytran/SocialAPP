{"ast":null,"code":"import * as types from \"../constants/blog.constants\";\nimport api from \"../../apiService\";\n\nconst getBlogs = (pageNum, limit, field_name) => async dispatch => {\n  dispatch({\n    type: types.GET_BLOGS_REQUEST\n  });\n\n  try {\n    let query = \"\";\n\n    if (field_name) {\n      query = `&title[$regex]=${field_name}&title[$options]=i`;\n    }\n\n    const url = `/blogs?page=${pageNum}&limit=${limit}${query}&sortBy[createdAt]=1`;\n    const res = await api.get(url);\n    console.log(\" success\", res.data.success);\n\n    if (res.data.success === true) {\n      console.log(\"data\", res.data.data.totalPages);\n      dispatch({\n        type: types.GET_BLOGS_SUCCESS,\n        payload: res.data.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: types.GET_BLOGS_FAILURE,\n      payload: error\n    });\n  }\n};\n\nconst getSingleBlog = id => async dispatch => {\n  dispatch({\n    type: types.GET_SINGLE_BLOGS_REQUEST\n  });\n\n  try {\n    const res = await api.get(`/blogs/${id}`);\n    console.log(\"single data\", res);\n    dispatch({\n      type: types.GET_SINGLE_BLOGS_SUCCESS,\n      payload: res.data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_SINGLE_BLOGS_FAILURE,\n      payload: error\n    });\n  }\n};\n\nconst createReview = ({\n  blogId,\n  review\n}) => async dispatch => {\n  dispatch({\n    type: types.CREATE_REVIEW_REQUEST\n  });\n  console.log(\"blog id\", blogId);\n\n  try {\n    const res = await api.post(`/reviews/blogs/${blogId}`, {\n      content: review\n    });\n    console.log(\"create blog\", res.data.data);\n    dispatch({\n      type: types.CREATE_REVIEW_SUCCESS,\n      payload: res.data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CREATE_REVIEW_FAILURE,\n      payload: error\n    });\n  }\n};\n\nconst blogActions = {\n  getBlogs,\n  getSingleBlog,\n  createReview\n};\nexport default blogActions;","map":{"version":3,"sources":["/Users/catanh/Desktop/coderschool/social-blog-group-3/src/redux/actions/blog.actions.js"],"names":["types","api","getBlogs","pageNum","limit","field_name","dispatch","type","GET_BLOGS_REQUEST","query","url","res","get","console","log","data","success","totalPages","GET_BLOGS_SUCCESS","payload","error","GET_BLOGS_FAILURE","getSingleBlog","id","GET_SINGLE_BLOGS_REQUEST","GET_SINGLE_BLOGS_SUCCESS","GET_SINGLE_BLOGS_FAILURE","createReview","blogId","review","CREATE_REVIEW_REQUEST","post","content","CREATE_REVIEW_SUCCESS","CREATE_REVIEW_FAILURE","blogActions"],"mappings":"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","sourcesContent":["import * as types from \"../constants/blog.constants\";\nimport api from \"../../apiService\";\n\nconst getBlogs = (pageNum, limit, field_name) => async (dispatch) => {\n  dispatch({ type: types.GET_BLOGS_REQUEST });\n  try {\n    let query = \"\";\n    if (field_name) {\n      query = `&title[$regex]=${field_name}&title[$options]=i`;\n    }\n    const url = `/blogs?page=${pageNum}&limit=${limit}${query}&sortBy[createdAt]=1`;\n    const res = await api.get(url);\n    console.log(\" success\", res.data.success);\n    if (res.data.success === true) {\n      console.log(\"data\", res.data.data.totalPages);\n      dispatch({ type: types.GET_BLOGS_SUCCESS, payload: res.data.data });\n    }\n  } catch (error) {\n    dispatch({ type: types.GET_BLOGS_FAILURE, payload: error });\n  }\n};\n\nconst getSingleBlog = (id) => async (dispatch) => {\n  dispatch({ type: types.GET_SINGLE_BLOGS_REQUEST });\n  try {\n    const res = await api.get(`/blogs/${id}`);\n    console.log(\"single data\", res);\n    dispatch({ type: types.GET_SINGLE_BLOGS_SUCCESS, payload: res.data.data });\n  } catch (error) {\n    dispatch({ type: types.GET_SINGLE_BLOGS_FAILURE, payload: error });\n  }\n};\n\nconst createReview = ({ blogId, review }) => async (dispatch) => {\n  dispatch({ type: types.CREATE_REVIEW_REQUEST });\n  console.log(\"blog id\", blogId);\n  try {\n    const res = await api.post(`/reviews/blogs/${blogId}`, {\n      content: review,\n    });\n    console.log(\"create blog\", res.data.data);\n    dispatch({ type: types.CREATE_REVIEW_SUCCESS, payload: res.data.data });\n  } catch (error) {\n    dispatch({ type: types.CREATE_REVIEW_FAILURE, payload: error });\n  }\n};\nconst blogActions = {\n  getBlogs,\n  getSingleBlog,\n  createReview,\n};\n\nexport default blogActions;\n"]},"metadata":{},"sourceType":"module"}